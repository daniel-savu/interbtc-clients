initSidebarItems({"fn":[["assert_event","wait for an event to occur. After the specified error, this will panic. This returns the event."],["assert_issue","request, pay and execute an issue"],["default_provider_client","Start a new instance of the parachain. The second item in the returned tuple must remain in scope as long as the parachain is active, since dropping it will remove the temporary directory that the parachain uses"],["get_required_vault_collateral_for_issue","calculate how much collateral the vault requires to accept an issue of the given size"],["set_bitcoin_fees",""],["set_exchange_rate_and_wait",""],["setup_provider","Create a new parachain_rpc with the given keyring"],["test_service","run `service` in the background, and run `fut`. If the service completes before the second future, this will panic"]],"struct":[["MockBitcoinCore","A simulated bitcoin-core interface. It combines the roles of bitcoin-core and the staked relayer: it automatically relays the generated transactions to the parachain. It does the minimum amount of work it can get away with, and the relayed data may be technically invalid. For example, all generated transactions share the same dummy input uxto."],["SubxtClient","Client for an embedded substrate node."]],"trait":[["Translate","Trait to help between different types used by the two bitcoin libraries"]]});